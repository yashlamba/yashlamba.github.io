[{"content":" This post doesn\u0026rsquo;t explain much about simulate, rather my experience of building it. Visit Simulate docs to know more.\nSimulate was one of my first major projects. It taught me one of the most important skills of my developer journey, which is Project Based Learning.\nIn 2019, at the end of my freshman year, Flutter was starting to get super popular. Me and a friend tinkered a bit with Flutter and decided that we can learn it on the go while building something. Flutter seemed quite easy to learn, efficient to use and a perfect fit for me since I had only worked with backend projects and libraries until then. It was a magical technology which would unlock the access to building beautiful UIs without the hassle of CSS and that too on any device! I can talk hours about Flutter but this is about Simulate. So me and the friend searched for some projects and saw a common pattern of people recommending to build a mathematical/algorithmic simulation. We then thought, why not build a collection on these!\nSo we started looking for inspiration and built the basic UI. I remember watching coding challenges on The Coding Train YouTube channel, that series was an integral part of this project (Thanks, Daniel Shiffman and The Coding Train). We started with Bubble sort and the Toothpick Pattern, and it worked out so great! We loved the process and kept looking for more inspiration.\nWe added more simulations, overhauled the UI a couple of times, added ability to favorite and search simulations and introduced Dark Mode! It wasn\u0026rsquo;t just me and my friend, so many other people collaborated on the project and it was amazing.\nWe also got selected in GirlScript Summer of Code in 2020, 21 and had a great time mentoring people who wanted to contribute to the project. I administered the project in 2020 followed by my Junior Yashu Garg in 2020.\nThe project was a huge confidence booster for me and I show it off really often. Simulate now has 10 beautiful simulations. Even though I don\u0026rsquo;t actively maintain/build it anymore, I am more than happy to help people who want to contribute/learn/take it further :)\nGitHub: builtree/simulate\nDocs: Simulate Docs\nLive Project: Check it Out!\nThanks: Saksham, Yashu, Akshansh, Kartikey and other amazing OSS contributors!\n","permalink":"https://yashlamba.com/projects/simulate/","summary":"This post doesn\u0026rsquo;t explain much about simulate, rather my experience of building it. Visit Simulate docs to know more.\nSimulate was one of my first major projects. It taught me one of the most important skills of my developer journey, which is Project Based Learning.\nIn 2019, at the end of my freshman year, Flutter was starting to get super popular. Me and a friend tinkered a bit with Flutter and decided that we can learn it on the go while building something.","title":"Simulate"},{"content":"About the Fellowship Polygon Fellowship organised by Devfolio is an exclusive 8-week mentor-led learn-to-earn program to get started with Web3 development. The program has 2 tracks: Beginner Track and Builder Track. As the names suggest, Beginner track is focused on developers who are new to web3/are looking to start there web3 journey. Builder track is for more advanced developers who already know a bit web3 and are looking to work on mentor-guided projects.\nApplication and Selection Application to the fellowship was quite similar to Hackathon Applications on Devfolio, asking about your past experience, projects and any Web3 ideas you have in mind. This was followed by a short interview.\nThe interview was expected to be 20 minutes or so and I was prepared to be grilled on web3/blockchain questions (of which I knew almost nothing about!). Surprisingly, the experience was quite pleasant and I was just asked questions about my development journey, projects and experience. It lasted not more than 7-8 minutes. Honestly, I was quite positive about my selection post the interview but didn\u0026rsquo;t know I was competing with so many applicants!!\nThe selection was highly competitive, quoting the official blog: \u0026ldquo;Polygon partnered with Devfolio to bring together a group of talented and motivated fellows to the eight-week long fellowship, capped by a one week IRL event. These fellows were selected from more than 10,000 registrations, with an acceptance rate of 0.7%.\u0026rdquo;\nExperience To be honest, I have always been very speculative of the \u0026ldquo;web3\u0026rdquo; hype and didn\u0026rsquo;t really understand the need for it (still don\u0026rsquo;t quite a bit). Given the environmental impacts and quite a scammy nature of few applications, I was never supportive of the \u0026ldquo;revolution\u0026rdquo;.\nStill, I entered this fellowship with an open mind and the hopes of learning more about the tech behind the applications and see if it is actually as revolutionary as people claim.\nThe pattern for our beginner track was simple, for next 6 weeks, we would learn about a new concept each week and complete some assignments and mini projects to unlock our stipend. The last 2 weeks were dedicated to building a project and showcasing it at the end of the final week at the HackerHouse in Bangalore (more about it later). Weekly topics included basics of blockchain, POW vs POS, NFTs, DAOs, Building Dapps, IPFS, Web3 Infra, Smart Contracts and a lot more. Everything was well managed, kudos to the Devfolio team! They were flexible when required and helped me throughout the fellowship.\nI built quite a few mini projects like a borrowing dapp - which allows users to borrow stable coins for ethereum, memer - exclusive meme focused social media dapp using IPFS, and a couple more. Because of these projects, I not only learnt a lot of about web3 and smart contracts but also improved my frontend development skills in React.\nAfter 6 weeks of learning and brainstorming our final project ideas, I teamed up with Devansh from my cohort to build our project - Console3.\nNext up, @yshlamba \u0026amp; @devanshShukl_a are building Console3 ðŸ”¥\nIt enables hassle-free integration of in-game assets and allows game developers to build without falling down the Web3 rabbit hole!\nðŸ‘‰https://t.co/Vv95ksthKv pic.twitter.com/5a0A8sXRQb\n\u0026mdash; Devfolio (@devfolio) August 7, 2022 HackerHouse The last week of the fellowship (31st Jul - 7th Aug), all fellows were invited to the HackerHouse organised at The Paul, Bangalore. I was super excited for this week because of the hype that Devfolio team created for us during the past 7 weeks and it proved to be over and beyond the hype!\nI arrived at the venue on 30th July and it was just beautiful. The venue and each individual suite was decorated, and the environment was really good (Thanks to Bangalore weather). I met so many amazing people on Day 1 itself and had amazing discussions over lunch while we waited for our rooms to be ready.\nFor the next week, we had a lot of sessions to attend by amazing people in this space. I got to have 1:1 chats with builders, founders, even VCs and everyone was full of energy constantly asking each other \u0026ldquo;What are you building?\u0026rdquo;. I can\u0026rsquo;t even count how many times I pitched my project to a random person who I met literally 2 mins ago. Along with the sessions and networking, every fellow was busy building for the end of the week, the Demo Day. The demo day was an incredible opportunity for us builders to demo our projects in front of other builders, founders and VCs.\nFor building and sessions, a huge banquet area (HackerHall) was made available with monitors setup and an amazing co-working environment. I personally prefer working alone, but it was nice to have this option.\nApart from this, there was amazing food available even at 2 AM. We got so many swags including t-shirts, bag, shorts, gadgets and so much more. Devfolio cold brews helped us through all-nighters building our projects (must try if you can get one).\nAfter the month long week of fun, hardwork and the final demo, there was a proper graduation ceremony organised followed by an amazing after party! This week was more fun than my entire college journey:P\nHackerHouse in 5 words: Building, Party, Network, Food, Swags. I don\u0026rsquo;t think developers need anything more!?\nConclusion After this fellowship, I definitely see certain use cases of blockchain as a technology and am excited to harness it in some of my projects. I still don\u0026rsquo;t believe in the whole \u0026ldquo;Web3\u0026rdquo; hype, but defintely appreciate the tech that it works on.\nThank you so much Polygon and Devfolio for this amazing (amazing use count - 7) experience! Would definitely recommend anyone reading this blog to apply and get to know the real applications behind the hype.\n","permalink":"https://yashlamba.com/blogs/polygon-fellowship-2022/","summary":"About the Fellowship Polygon Fellowship organised by Devfolio is an exclusive 8-week mentor-led learn-to-earn program to get started with Web3 development. The program has 2 tracks: Beginner Track and Builder Track. As the names suggest, Beginner track is focused on developers who are new to web3/are looking to start there web3 journey. Builder track is for more advanced developers who already know a bit web3 and are looking to work on mentor-guided projects.","title":"My Web3 Experience: Polygon Fellowship 2022"},{"content":"Introduction Snake game is probably one of the most known video games in the world and I have built it multiple times, why? Because itâ€™s a good intro project to any new language or framework. I have built it with Python, C++, Javascript, and Dart (Flutter). I frequently use it as an example when Iâ€™m teaching someone the basics of a language/framework.\nIn this tutorial, weâ€™ll build the Snake Game with Flutter. Some interesting things weâ€™ll cover:\nObject-Oriented Design No frameworks - No game engines or third party libraries Flaws and Future Follow Ups Things that arenâ€™t covered well:\nStructuring a Flutter project - Weâ€™ll do it in one single file (executable on dartpad.dev) UI/UX - No menu, UI, glyphs, etc. Scoring - Because it doesn\u0026rsquo;t add value to project. Letâ€™s start:\nFor any simple single-player game, I usually start by thinking the following, step by step:\nObjects: What are the moving parts of the game, and which objects matter for building the MPG (Minimum Playable Game). In our game, they are the Snake and it\u0026rsquo;s food. State: The state of the game and connecting the objects. In the snake game, the state is a grid, wherein the snake and food will be. Weâ€™ll draw these using simple containers. Update State: The snake has to continually move forward which is a periodic update, and based on this (and the user input) the objects will have to respond to different states like snake eating the food, snake biting itself, snake hitting the wall, changing direction, etc. Controls: User controls; In our case, change the direction of the snake based on input (arrow keys to set the direction). Score: Score calculation and reset - number of food eaten. (not implemented in this tutorial though) So having these things sorted, letâ€™s code!\nFoundation We start with a stateless widget SnakeGame to define our MaterialApp. Followed by a stateful widget Game which would render our game and manage the State.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import \u0026#39;package:flutter/material.dart\u0026#39;; void main() { runApp(const SnakeGame()); } class SnakeGame extends StatelessWidget { const SnakeGame({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return const MaterialApp( title: \u0026#34;Snake Game\u0026#34;, home: Center( child: Game(), ), ); } } class Game extends StatefulWidget { const Game({Key? key}) : super(key: key); @override State\u0026lt;Game\u0026gt; createState() =\u0026gt; _GameState(); } class _GameState extends State\u0026lt;Game\u0026gt; { @override Widget build(BuildContext context) { return Container( width: 500, // Update with constants in next step height: 500, // Update with constants in next step color: Colors.black, ); } } Since weâ€™ll need a few constants, letâ€™s define a Constants class to access/modify them easily. Right now, we need 2 constants, canvasSize (height and width of the canvas) and blockSize (size of 1 block) so that we can imagine our canvas as a grid of side canvasSize/blockSize elements.\n1 2 3 4 5 class Constants { // Canvas static const double canvasSize = 500; static const double blockSize = 10; } After replacing height and width in the GameState with Constants.canvasSize we have a 50x50 imaginary grid to work with.\nEmpty Canvas\nModels/Objects Let\u0026rsquo;s start with our Snake; To represent the snake weâ€™ll use a List of 2D points, and the number of points increases when the snake eats food. The first element of the list will be the location of the head and the last element, the tail. A point is just x, y values on a grid and for that, weâ€™ll use dartâ€™s Point class (imported from dart:math).\nWe also need a direction to represent in which direction the snake is moving, this can also be represented using a Point object since we just need to update the head of the snake along a certain axis, i.e. certain x, y values. We can add these directions to the constants and define our snake:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Constants { // Canvas static const double canvasSize = 500; static const double blockSize = 10; // Directions static const up = Point(0, -1); static const down = Point(0, 1); static const right = Point(1, 0); static const left = Point(-1, 0); } class Snake { List\u0026lt;Point\u0026lt;int\u0026gt;\u0026gt; snake = [const Point(0, 0)]; Point\u0026lt;int\u0026gt; direction = Constants.right; Point\u0026lt;int\u0026gt; get head { return snake[0]; } } Now, we can add a snake object to our GameState along with the food, which also can be just a Point. In the below code, we introduce some things:\nrandom: To generate random numbers (random food locations). initGame: To initialize the Snake object and food location. foodUpdate: To update food location. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class _GameState extends State\u0026lt;Game\u0026gt; { late Snake snake; late Point\u0026lt;int\u0026gt; food; Random random = Random(); @override void initState() { initGame(); super.initState(); } initGame() { snake = Snake(); foodUpdate(); } void foodUpdate() { food = Point(random.nextInt(Constants.canvasSize ~/ Constants.blockSize), random.nextInt(Constants.canvasSize ~/ Constants.blockSize)); } @override Widget build(BuildContext context) { return Container( width: Constants.canvasSize, height: Constants.canvasSize, color: Colors.black, ); } } Now we are more or less done with the foundation code, we just need to paint the snake and food on the canvas. For that, weâ€™ll use Stack and Positioned Widgets. Positioned puts a widget to provided locations in a Stack. Weâ€™ll use the properties, top and left to set y and x of the widget respectively.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Widget build(BuildContext context) { return Container( width: Constants.canvasSize, height: Constants.canvasSize, color: Colors.black, child: Stack( children: snake.snake .map((e) =\u0026gt; Positioned( top: Constants.blockSize * e.y, left: Constants.blockSize * e.x, child: Container( height: Constants.blockSize, width: Constants.blockSize, color: Colors.green, ), )) .toList() + [ Positioned( top: Constants.blockSize * food.y, left: Constants.blockSize * food.x, child: Container( height: Constants.blockSize, width: Constants.blockSize, color: Colors.red, ), ) ], ), ); } In the above code, we basically created a Positioned Widget for each part of the snake and added a food object as well to that list.\nPainting Snake and Food\nUpdate State Letâ€™s make the game alive now. We want to periodically update the state of the canvas and for that, we can use Timer.periodic (imported from dart:async) which calls a function after certain Duration periodically.\nWe can add it to the initState which gets called once our game starts. We also need an update function, which is passed as a callback to Timer.periodic and is responsible for updating the game state.\nBefore implementing this gameUpdate function, letâ€™s see what we actually need to update:\nMove the snake in a particular direction Check if the snakeâ€™s head overlaps with food if yes, eat food, add length to the snake, and call foodUpdate Check if the snakeâ€™s head overlapped with any other body part, if yes, reset the game. Implementation (added to GameState):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @override void initState() { initGame(); Timer.periodic(const Duration(milliseconds: 50), (t) { gameUpdate(); }); super.initState(); } void gameUpdate() { // update this if (food == snake.head) { snake.eatFood(); foodUpdate(); } else { snake.update(); } if (snake.didBiteItself()) { initGame(); } setState(() {}); } Added to Snake Class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 bool didBiteItself() { for (int i = 1; i \u0026lt; snake.length; i++) { if (snake[i] == head) { return true; } } return false; } void update() { // For moving in a direction, move all body parts to the location of the // part before them for (int i = snake.length - 1; i \u0026gt; 0; --i) { snake[i] = snake[i - 1]; } // Then update in the direction snake is moving // Mod 50 because, we want the snake to wrap when hitting a wall snake[0] = Point((head.x + direction.x) % 50, (head.y + direction.y) % 50); } void eatFood() { // Since food is added to the end and snake would ultimately // Update one position, save the last location and append it again. var foodLoc = snake.last; update(); snake.add(foodLoc); } At this point, our game starts working (not controllable though). One bug I would like to address is that our foodUpdate might add the food on the snake\u0026rsquo;s body, so let\u0026rsquo;s add a check for that.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // In the Stateful Widget void foodUpdate() { do { food = Point(random.nextInt(Constants.canvasSize ~/ Constants.blockSize), random.nextInt(Constants.canvasSize ~/ Constants.blockSize)); } while (snake.pointOnSnake(food)); } // In the snake class bool pointOnSnake(Point\u0026lt;int\u0026gt; point) { for (Point body in snake) { if (body == point) { return true; } } return false; } Another interesting thing in the above code is snake[0] = Point((head.x + direction.x) % 50, (head.y + direction.y) % 50); this line is really interesting on how it handles negative x, y cases (read about mod with negative numbers).\nControls We are pretty much done now, we just need to be able to control the snake, thatâ€™s it. I understand the chronology of this is a bit weird and we should have done this before the whole eat food logic, but having implemented the snake game quite a bit, I usually do this at the end.\nThis part doesnâ€™t need much explanation, just two things are sufficient I guess:\nWe are using RawKeyboardListener widget with autofocus set to true (so that we donâ€™t have to tap it to take control). Weâ€™ll also define a keyHandler function to handle the events by the listener. (LogicalKeyboardKey is imported from flutter/services.dart) Two edge/additional cases I would like to address: We donâ€™t allow the snake to go in the direct opposite direction. We donâ€™t call setState because regardless, it would be called within max 50 ms; We CAN call it but it wonâ€™t make much of a difference. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 void keyHandler(RawKeyEvent event) { if (event.logicalKey == LogicalKeyboardKey.arrowDown) { if (snake.direction != Constants.up) { snake.direction = Constants.down; } } else if (event.logicalKey == LogicalKeyboardKey.arrowUp) { if (snake.direction != Constants.down) { snake.direction = Constants.up; } } else if (event.logicalKey == LogicalKeyboardKey.arrowRight) { if (snake.direction != Constants.left) { snake.direction = Constants.right; } } else if (event.logicalKey == LogicalKeyboardKey.arrowLeft) { if (snake.direction != Constants.right) { snake.direction = Constants.left; } } } @override Widget build(BuildContext context) { return RawKeyboardListener( focusNode: FocusNode(), onKey: keyHandler, autofocus: true, child: Container( width: Constants.canvasSize, height: Constants.canvasSize, color: Colors.black, child: Stack( children: snake.snake // Update This .map((e) =\u0026gt; Positioned( top: Constants.blockSize * e.y, left: Constants.blockSize * e.x, child: Container( height: Constants.blockSize, width: Constants.blockSize, color: Colors.green, ), )) .toList() + [ Positioned( top: Constants.blockSize * food.y, left: Constants.blockSize * food.x, child: Container( height: Constants.blockSize, width: Constants.blockSize, color: Colors.red, ), ) ], ), ), ); } Voila! Our game is ready. Try it below:\nFollow Ups This implementation still has a few IO bugs which can lead to snake dying (hint: the way we load frames and update direction). We can use an input queue to fix that. Haven\u0026rsquo;t implemented score because it\u0026rsquo;s trivial for this game. A good follow up project would be to implement a multiplayer version of this. This project is quite simple and probaly not blog worthy, but I wrote it anyways because, it was fun and I wanted an easy writeup to get out of my writing rut:)\nLinks Source: Snake Game DartPad: Play Snake Game ","permalink":"https://yashlamba.com/blogs/flutter-snake/","summary":"Introduction Snake game is probably one of the most known video games in the world and I have built it multiple times, why? Because itâ€™s a good intro project to any new language or framework. I have built it with Python, C++, Javascript, and Dart (Flutter). I frequently use it as an example when Iâ€™m teaching someone the basics of a language/framework.\nIn this tutorial, weâ€™ll build the Snake Game with Flutter.","title":"Snake Game in Minutes with Flutter"},{"content":"Most developers prefer to use Linux or MacOS for development and the major reason in simple terms is the terminal and the ease they provide with their development environments. Windows has always been avoided by most developers (as far as I see in the community) but recently, after the announcement of Windows terminal and the increasing popularity of Windows Subsytem for Linux, many people have taken a stab at developing with Windows without having to install a Linux distro or use a Virtual Machine or in extreme cases, buy Macbooks.\nRecently, Flutter has been gaining extreme popularity and everyone is ditching native development to see what Flutter has to offer. I personally like flutter because how easy, fast and beautiful it is. It helps design UIs easily for the algorithms/backend I am working on.\nComing to the main topic, it is pretty easy to setup flutter for any platform be it Windows, Linux or MacOS. But what I wasn\u0026rsquo;t able to find anywhere was how to use flutter with WSL. Anyone can switch to powershell/cmd for using flutter though, but I like things at one place and below are the steps for the workaound:\nInstall Flutter in Windows: This is pretty straight forward and one can do this easily by following this link, you\u0026rsquo;ll also want to install Android Studio for the SDK in Windows itself. Finally, just make sure flutter works in powershell/cmd.\nWSL: I assume that you have WSL already setup, if not, you can follow this.\nBut now, if you\u0026rsquo;ll try to use Flutter in WSL bash, you will see an error like below.\n1 2 3 4 5 6 7 8 9 10 11 user@user:~/flutterproject$ flutter run /mnt/c/Development/flutter/bin/flutter: line 5: $\u0026#39;\\r\u0026#39;: command not found /mnt/c/Development/flutter/bin/flutter: line 6: $\u0026#39;\\r\u0026#39;: command not found /mnt/c/Development/flutter/bin/flutter: line 14: $\u0026#39;\\r\u0026#39;: command not found : invalid optionnt/flutter/bin/flutter: line 15: set: - set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...] /mnt/c/Development/flutter/bin/flutter: line 16: $\u0026#39;\\r\u0026#39;: command not found \u0026#39;: not a valid identifierr/bin/flutter: line 17: unset: `CDPATH /mnt/c/Development/flutter/bin/flutter: line 18: $\u0026#39;\\r\u0026#39;: command not found /mnt/c/Development/flutter/bin/flutter: line 19: syntax error near unexpected token `$\u0026#39;{\\r\u0026#39;\u0026#39; \u0026#39;mnt/c/Development/flutter/bin/flutter: line 19: `function follow_links() { the work around to this is, intead of running flutter run, use CMD.exe /c flutter run, but this too has a limitation that you can only run app repositories stored in Windows, not in WSL server, which is still a problem.\nSolution: I created couple of commands to help me move to Windows, without having to cd it out. And another to run the compatible flutter command without having to write CMD.exe /c flutter run again and again. Below are the commands and you can use them by pasting them in your .bashrc file and rebooting the terminal. 1 2 3 4 5 alias winpro=\u0026#39;cd /mnt/\u0026lt;DIRECTORY IN WINDOWS YOU WANT\u0026gt;\u0026#39; flutter() { command CMD.exe /c flutter $@ } Now you can run any flutter command in WSL and going to Windows is simple, just type winpro (or whatever you like).\n","permalink":"https://yashlamba.com/blogs/1/","summary":"Most developers prefer to use Linux or MacOS for development and the major reason in simple terms is the terminal and the ease they provide with their development environments. Windows has always been avoided by most developers (as far as I see in the community) but recently, after the announcement of Windows terminal and the increasing popularity of Windows Subsytem for Linux, many people have taken a stab at developing with Windows without having to install a Linux distro or use a Virtual Machine or in extreme cases, buy Macbooks.","title":"Working with Flutter on Windows Subsystem for Linux (WSL)"},{"content":"Hi, here\u0026rsquo;s a little about me.\nI am a full-stack developer, currently building/breaking/fixing stuff at HackerRank. I have worked with a lot of technologies and am quite fast in learning new things as well. Currently, I am figuring out backend architecture, design, infra scaling and cloud. I have also tinkered with ML/AI (can get a lot of things working) but am not actively improving myself in those.\nI always find myself in situations where I know the most complicated stuff but end up Googling the simplest things (like how to read csv hehe). I can learn new stuff fairly quickly and build amazing things with it! You can find most of my builds on GitHub.\nApart from development, I have a passion for teaching mathematics and computer science which I try to do as much as possible whenever I get a chance. I love to watch lectures and have completed over 10 MOOCs from MIT OpenCourseWare (Thank you, MIT).\nI like to read both fiction and non-fiction. Pandemic got me interested in plants and I have been studying more about botany since!\nCurrent Software Development Engineer @ HackerRank - Working with the DevEx team in improving candidate experience and plagiarism/proctoring services.\nStudent at Cluster Innovation Centre, University of Delhi pursuing Bachelors in Technology with major Information Technology and minor Systems Biology. (Graduating 2022)\nPast Experience Polygon Fellow - Class of 2022\nSDE Intern @ HackerRank - Working on improving plagiarism detection, analysis and deployment.\nHelped Maintain DFFML.\nGoogle Summer of Code 2020 Mentor @ Python Software Foundation, mentored for DFFML.\nDid some research work, find out more here.\nGirlscript Summer of Code 2020 Project Admin for Simulate.\nStudent Developer under Google Summer of Code 2019 with Python Software Foundation. Worked on a project under Intel.\nWorked as a Research and Development intern at Addmath Research Centre. Solved interesting mathematical problems for kids, with kids.\nContact You can connect with me on LinkedIn/Twitter (just DM me, I\u0026rsquo;ll be happy to chat!) or you can mail me directly!\n","permalink":"https://yashlamba.com/about/","summary":"Hi, here\u0026rsquo;s a little about me.\nI am a full-stack developer, currently building/breaking/fixing stuff at HackerRank. I have worked with a lot of technologies and am quite fast in learning new things as well. Currently, I am figuring out backend architecture, design, infra scaling and cloud. I have also tinkered with ML/AI (can get a lot of things working) but am not actively improving myself in those.\nI always find myself in situations where I know the most complicated stuff but end up Googling the simplest things (like how to read csv hehe).","title":"About"},{"content":" I used to read a lot from my 9-12 grade, but somehow lost the habit of reading in college. I have started reading again recently and decided to track the books I remember well. If you have any book recommendations, I\u0026rsquo;ll be happy to hear them via DMs/Mail.\nCurrently Reading Read ","permalink":"https://yashlamba.com/books/","summary":" I used to read a lot from my 9-12 grade, but somehow lost the habit of reading in college. I have started reading again recently and decided to track the books I remember well. If you have any book recommendations, I\u0026rsquo;ll be happy to hear them via DMs/Mail.\nCurrently Reading Read ","title":"Books"},{"content":" This isn\u0026rsquo;t Handwritten\nOur University decided to conduct OBEs (Open Book Examination) during the pandemic, remotely. It was like normal exams, get the question paper, write answers and get marks but the good thing was, it wasn\u0026rsquo;t proctored at all. You had 3+1 hours to finish the exam and upload the answers, and that\u0026rsquo;s it (they didn\u0026rsquo;t care how you did it). Now for a lot of people, this would sound easy-peasy but for us lazy engineers who hadn\u0026rsquo;t handwritten anything for almost a year (due to the pandemic), it was a nightmare. We got through the exams though and during the last exam we thought that this process should be automated, we should be able to type out our handwriting. Eureka!\nThis lead to a discussion between a couple of my friends and we thought of building an open source and better Calligraphr. A tool which will convert your handwriting into a font.\nSo the way Handwrite works is:\nYou print the form that we made.\nFill out your sample like below.\nFilled Form\nGive it to the CLI python package and Voila, you got a font! Generated Font in Action\nThis was basically it, but building it was tough. Really tough. Me and Saksham brainstormed for hours, figured out Potrace and Fontforge libraries (not easy to deal with at all). Researched effective ways to extract out letters, deal with a lot edge cases. But ultimately, we did it, and published it to PyPi.\nNot going to explain much since we have documented it quite well, but below images gives a good understanding on what happens to a sample form:\nExtracting Letters\nConversion from PNG -\u0026gt; BMP -\u0026gt; SVG -\u0026gt; TTF\nI learnt so much building handwrite, few key points:\nAnything you can imagine building in tech, is possible 99% of the times. Testing is very important, writing unit tests for Handwrite was really helpful in the later stages when we had to do major refactors. You can\u0026rsquo;t always do everything, collaboration is key. Solving problems around you make 10x better projects than regular UI clones. I discuss about Handwrite in every project based interview and interviewers always take so much interest! Handwrite made me so much better at CI/CD, Test Driven Development, Python Programming and Computer Vision . If you are wondering if it ever worked out for an actual use case? I submitted one assignment using Handwrite and didn\u0026rsquo;t get caught (I doubt whether the teacher even checked), after that didn\u0026rsquo;t have to write yet.\nLinks GitHub: builtree/handwrite Docs: Handwrite Docs Thanks: Saksham, Aryan and other amazing OSS contributors! Live: Live Website PyPI: ","permalink":"https://yashlamba.com/projects/handwrite/","summary":"This isn\u0026rsquo;t Handwritten\nOur University decided to conduct OBEs (Open Book Examination) during the pandemic, remotely. It was like normal exams, get the question paper, write answers and get marks but the good thing was, it wasn\u0026rsquo;t proctored at all. You had 3+1 hours to finish the exam and upload the answers, and that\u0026rsquo;s it (they didn\u0026rsquo;t care how you did it). Now for a lot of people, this would sound easy-peasy but for us lazy engineers who hadn\u0026rsquo;t handwritten anything for almost a year (due to the pandemic), it was a nightmare.","title":"Handwrite CLI"},{"content":"We built Handwrite as a CLI App initially (Read More). It was great but a little hard to explain and use through just a CLI app. I also had to show a software project in college so we decided to take this up. I connected with my friend Kartik who was interested in Frontend development and he was in. He built the initial web app while me and Saksham worked on the server.\nBuilding the server was very tricky, since we were making calls to some C libraries, we couldn\u0026rsquo;t just host a Python server. We needed a complete linux environment for which Docker was perfect. But this didn\u0026rsquo;t solve all the problems. Below are the problems (which I remember) one by one:\nSeparating font creation service from the API (which is why we needed a Queue) and figure out how to decrease the number of API calls and keep things as concurrent as possible (since C calls were considerably slow). Maintaining a Queue and track each image\u0026rsquo;s progress, we initially though of using Redis Q but it seemed like an overkill so we implemented a custom and simple background service. Fixing a hard to find memory leak; We are using Heroku\u0026rsquo;s free tier which offers 512MB RAM and we were filling it in just 50 requests. There was some serious memory leak, and we went from blaming OpenCV to exploring inner working of Python Libraries to checking Gunicorn to finally banging our heads over a stupid easy fix. We had no memory leak now, things were sorted. Building the web app wasn\u0026rsquo;t that tough, Kartik helped a lot and I also got my hands dirty with React and JS and learnt a lot.\nHandwrite Web\nLinks GitHub (Frontend): builtree/handwrite-web GitHub (Backend): builtree/handwrite-server Docs: Handwrite Docs Thanks: Saksham, Kartik and other amazing OSS contributors! Live: Live Website ","permalink":"https://yashlamba.com/projects/handwrite-web/","summary":"We built Handwrite as a CLI App initially (Read More). It was great but a little hard to explain and use through just a CLI app. I also had to show a software project in college so we decided to take this up. I connected with my friend Kartik who was interested in Frontend development and he was in. He built the initial web app while me and Saksham worked on the server.","title":"Handwrite Web"}]
[{"content":"Most developers prefer to use Linux or MacOS for development and the major reason in simple terms is the terminal and the ease they provide with their development environments. Windows has always been avoided by most developers (as far as I see in the community) but recently, after the announcement of Windows terminal and the increasing popularity of Windows Subsytem for Linux, many people have taken a stab at developing with Windows without having to install a Linux distro or use a Virtual Machine or in extreme cases, buy Macbooks.\nRecently, Flutter has been gaining extreme popularity and everyone is ditching native development to see what Flutter has to offer. I personally like flutter because how easy, fast and beautiful it is. It helps design UIs easily for the algorithms/backend I am working on.\nComing to the main topic, it is pretty easy to setup flutter for any platform be it Windows, Linux or MacOS. But what I wasn\u0026rsquo;t able to find anywhere was how to use flutter with WSL. Anyone can switch to powershell/cmd for using flutter though, but I like things at one place and below are the steps for the workaound:\n  Install Flutter in Windows: This is pretty straight forward and one can do this easily by following this link, you\u0026rsquo;ll also want to install Android Studio for the SDK in Windows itself. Finally, just make sure flutter works in powershell/cmd.\n  WSL: I assume that you have WSL already setup, if not, you can follow this.\n  But now, if you\u0026rsquo;ll try to use Flutter in WSL bash, you will see an error like below.\n1 2 3 4 5 6 7 8 9 10 11  user@user:~/flutterproject$ flutter run /mnt/c/Development/flutter/bin/flutter: line 5: $\u0026#39;\\r\u0026#39;: command not found /mnt/c/Development/flutter/bin/flutter: line 6: $\u0026#39;\\r\u0026#39;: command not found /mnt/c/Development/flutter/bin/flutter: line 14: $\u0026#39;\\r\u0026#39;: command not found : invalid optionnt/flutter/bin/flutter: line 15: set: - set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...] /mnt/c/Development/flutter/bin/flutter: line 16: $\u0026#39;\\r\u0026#39;: command not found \u0026#39;: not a valid identifierr/bin/flutter: line 17: unset: `CDPATH /mnt/c/Development/flutter/bin/flutter: line 18: $\u0026#39;\\r\u0026#39;: command not found /mnt/c/Development/flutter/bin/flutter: line 19: syntax error near unexpected token `$\u0026#39;{\\r\u0026#39;\u0026#39; \u0026#39;mnt/c/Development/flutter/bin/flutter: line 19: `function follow_links() {   the work around to this is, intead of running flutter run, use CMD.exe /c flutter run, but this too has a limitation that you can only run app repositories stored in Windows, not in WSL server, which is still a problem.\nSolution: I created couple of commands to help me move to Windows, without having to cd it out. And another to run the compatible flutter command without having to write CMD.exe /c flutter run again and again. Below are the commands and you can use them by pasting them in your .bashrc file and rebooting the terminal.  1 2 3 4 5  alias winpro=\u0026#39;cd /mnt/\u0026lt;DIRECTORY IN WINDOWS YOU WANT\u0026gt;\u0026#39;  flutter() {  command CMD.exe /c flutter $@ }   Now you can run any flutter command in WSL and going to Windows is simple, just type winpro (or whatever you like).\n","permalink":"https://yashlamba.github.io/blogs/1/","summary":"Most developers prefer to use Linux or MacOS for development and the major reason in simple terms is the terminal and the ease they provide with their development environments. Windows has always been avoided by most developers (as far as I see in the community) but recently, after the announcement of Windows terminal and the increasing popularity of Windows Subsytem for Linux, many people have taken a stab at developing with Windows without having to install a Linux distro or use a Virtual Machine or in extreme cases, buy Macbooks.","title":"Working with Flutter on Windows Subsystem for Linux (WSL)"},{"content":"Hi, here\u0026rsquo;s a little about me.\n I am a full-stack developer, currently building/breaking/fixing stuff at HackerRank. I have worked with a lot of technologies and am quite fast in learning new things as well. Currently, I am figuring out backend architecture, design, infra scaling and cloud. I have also tinkered with ML/AI (can get a lot of things working) but am not actively improving myself in those.\nI always find myself in situations where I know the most complicated stuff but end up Googling the simplest things (like how to read csv hehe). I can learn new stuff fairly quickly and build amazing things with it! You can find most of my builds on GitHub.\nApart from development, I have a passion for teaching mathematics and computer science which I try to do as much as possible whenever I get a chance. I love to watch lectures and have completed over 10 MOOCs from MIT OpenCourseWare (Thank you, MIT).\nI like to read both fiction and non-fiction. Pandemic got me interested in plants and I have been studying more about botany since!\nCurrent   Software Development Engineer @ HackerRank - Working with the DevEx team in improving candidate experience and plagiarism/proctoring services.\n  Student at Cluster Innovation Centre, University of Delhi pursuing Bachelors in Technology with major Information Technology and minor Systems Biology. (Graduating 2022)\n  Past Experience   SDE Intern @ HackerRank - Working on improving plagiarism detection, analysis and deployment.\n  Helped Maintain DFFML.\n  Google Summer of Code 2020 Mentor @ Python Software Foundation, mentored for DFFML.\n  Did some research work, find out more here.\n  Girlscript Summer of Code 2020 Project Admin for Simulate.\n  Student Developer under Google Summer of Code 2019 with Python Software Foundation. Worked on a project under Intel.\n  Worked as a Research and Development intern at Addmath Research Centre. Solved interesting mathematical problems for kids, with kids.\n  Contact You can connect with me on LinkedIn/Twitter (just DM me, I\u0026rsquo;ll be happy to chat!) or you can mail me directly!\n","permalink":"https://yashlamba.github.io/about/","summary":"Hi, here\u0026rsquo;s a little about me.\n I am a full-stack developer, currently building/breaking/fixing stuff at HackerRank. I have worked with a lot of technologies and am quite fast in learning new things as well. Currently, I am figuring out backend architecture, design, infra scaling and cloud. I have also tinkered with ML/AI (can get a lot of things working) but am not actively improving myself in those.\nI always find myself in situations where I know the most complicated stuff but end up Googling the simplest things (like how to read csv hehe).","title":"About"},{"content":" GitHub: builtree/handwrite\nDocs: Handwrite Docs\nThanks: Saksham, Aryan and other amazing OSS contributors!\nPyPi:  \n   This isn\u0026rsquo;t Handwritten\n  Our University decided to conduct OBEs (Open Book Examination) during the pandemic, remotely. It was like normal exams, get the question paper, write answers and get marks but the good thing was, it wasn\u0026rsquo;t proctored at all. You had 3+1 hours to finish the exam and upload the answers, and that\u0026rsquo;s it (they didn\u0026rsquo;t care how you did it). Now for a lot of people, this would sound easy-peasy but for us lazy engineers who hadn\u0026rsquo;t handwritten anything for almost a year (due to the pandemic), it was a nightmare. We got through the exams though and during the last exam we thought that this process should be automated, we should be able to type out our handwriting. Eureka!\nThis lead to a discussion between a couple of my friends and we thought of building an open source and better Calligraphr. A tool which will convert your handwriting into a font.\nSo the way Handwrite works is:\n  You print the form that we made.\n  Fill out your sample like below.\n   Filled Form\n  Give it to the CLI python package and Voila, you got a font!   Generated Font in Action\n  This was basically it, but building it was tough. Really tough. Me and Saksham brainstormed for hours, figured out Potrace and Fontforge libraries (not easy to deal with at all). Researched effective ways to extract out letters, deal with a lot edge cases. But ultimately, we did it, and published it to PyPi.\nNot going to explain much since we have documented it quite well, but below images gives a good understanding on what happens to a sample form:\n Extracting Letters\n   Conversion from PNG -\u0026gt; BMP -\u0026gt; SVG -\u0026gt; TTF\n  I learnt so much building handwrite, few key points:\n Anything you can imagine building in tech, is possible 99% of the times. Testing is very important, writing unit tests for Handwrite was really helpful in the later stages when we had to do major refactors. You can\u0026rsquo;t always do everything, collaboration is key. Solving problems around you make 10x better projects than regular UI clones. I discuss about Handwrite in every project based interview and interviewers always take so much interest! Handwrite made me so much better at CI/CD, Test Driven Development, Python Programming and Computer Vision .   If you are wondering if it ever worked out for an actual use case? I submitted one assignment using Handwrite and didn\u0026rsquo;t get caught (I doubt whether the teacher even checked), after that didn\u0026rsquo;t have to write yet.\n ","permalink":"https://yashlamba.github.io/projects/handwrite/","summary":"GitHub: builtree/handwrite\nDocs: Handwrite Docs\nThanks: Saksham, Aryan and other amazing OSS contributors!\nPyPi:  \n   This isn\u0026rsquo;t Handwritten\n  Our University decided to conduct OBEs (Open Book Examination) during the pandemic, remotely. It was like normal exams, get the question paper, write answers and get marks but the good thing was, it wasn\u0026rsquo;t proctored at all. You had 3+1 hours to finish the exam and upload the answers, and that\u0026rsquo;s it (they didn\u0026rsquo;t care how you did it).","title":"Handwrite (Python Package)"},{"content":" GitHub: builtree/simulate\nDocs: Simulate Docs\nLive Project: Check it Out!\nThanks: Saksham, Yashu, Akshansh, Kartikey and other amazing OSS contributors!\n   This post doesn\u0026rsquo;t explain much about simulate, rather my experience of building it. Visit Simulate docs to know more.\n Simulate was one of my first major projects. It taught me one of the most important skills of my developer journey, which is Project Based Learning.\nIn 2019, at the end of my freshman year, Flutter was starting to get super popular. Me and a friend tinkered a bit with Flutter and decided that we can learn it on the go while building something. Flutter seemed quite easy to learn, efficient to use and a perfect fit for me since I had only worked with backend projects and libraries until then. It was a magical technology which would unlock the access to building beautiful UIs without the hassle of CSS and that too on any device! I can talk hours about Flutter but this is about Simulate. So me and the friend searched for some projects and saw a common pattern of people recommending to build a mathematical/algorithmic simulation. We then thought, why not build a collection on these!\nSo we started looking for inspiration and built the basic UI. I remember watching coding challenges on The Coding Train YouTube channel, that series was an integral part of this project (Thanks, Daniel Shiffman and The Coding Train). We started with Bubble sort and the Toothpick Pattern, and it worked out so great! We loved the process and kept looking for more inspiration.\nWe added more simulations, overhauled the UI a couple of times, added ability to favorite and search simulations and introduced Dark Mode! It wasn\u0026rsquo;t just me and my friend, so many other people collaborated on the project and it was amazing.\nWe also got selected in GirlScript Summer of Code in 2020, 21 and had a great time mentoring people who wanted to contribute to the project. I administered the project in 2020 followed by my Junior Yashu Garg in 2020.\nThe project was a huge confidence booster for me and I show it off really often. Simulate now has 10 beautiful simulations. Even though I don\u0026rsquo;t actively maintain/build it anymore, I am more than happy to help people who want to contribute/learn/take it further :)\n","permalink":"https://yashlamba.github.io/projects/simulate/","summary":"GitHub: builtree/simulate\nDocs: Simulate Docs\nLive Project: Check it Out!\nThanks: Saksham, Yashu, Akshansh, Kartikey and other amazing OSS contributors!\n   This post doesn\u0026rsquo;t explain much about simulate, rather my experience of building it. Visit Simulate docs to know more.\n Simulate was one of my first major projects. It taught me one of the most important skills of my developer journey, which is Project Based Learning.","title":"Simulate"}]